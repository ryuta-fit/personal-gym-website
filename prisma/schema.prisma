// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(CUSTOMER)
  phone         String?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bookings      Booking[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Trainer {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  phone       String?
  specialties String?   // JSON string containing array of specialties
  bio         String?
  profileImage String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings    Booking[]
  availability TrainerAvailability[]

  @@map("trainers")
}

model TrainerAvailability {
  id        String    @id @default(cuid())
  trainerId String
  dayOfWeek Int       // 0=Sunday, 1=Monday, ..., 6=Saturday
  startTime String    // HH:MM format
  endTime   String    // HH:MM format
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  trainer   Trainer   @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([trainerId, dayOfWeek], name: "trainerId_dayOfWeek")
  @@map("trainer_availability")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  trainerId   String
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainer     Trainer       @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  featuredImage String?
  status      PostStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  categories  BlogCategory[]
  tags        BlogTag[]

  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())

  posts     BlogPost[]

  @@map("blog_tags")
}

model Newsletter {
  id          String            @id @default(cuid())
  email       String            @unique
  status      SubscriptionStatus @default(ACTIVE)
  subscribedAt DateTime          @default(now())
  unsubscribedAt DateTime?

  @@map("newsletters")
}

model NewsletterCampaign {
  id          String    @id @default(cuid())
  title       String
  subject     String
  content     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("newsletter_campaigns")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubscriptionStatus {
  ACTIVE
  UNSUBSCRIBED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
}
